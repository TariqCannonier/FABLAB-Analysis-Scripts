function [ExperimentName1,Site1,NDARGUID1,Version1,SessionDate,Happy_HR,Happy_FA,Happy_Pr,Happy_Br,Happy_Miss,Happy_CR,Happy_dprime,Fear_HR,Fear_FA,Fear_Pr,Fear_Br,Fear_Miss,Fear_CR,Fear_dprime,Neut_HR,Neut_FA,Neut_Pr,Neut_Br,Neut_Miss,Neut_CR,Neut_dprime,Place_HR,Place_FA,Place_Pr,Place_Br,Place_Miss,Place_CR,Place_dprime,Happy0back_HR,Fear0back_HR,Neut0back_HR,Place0back_HR,Happy2back_HR,Fear2back_HR,Neut2back_HR,Place2back_HR,Happy_TargetHR,Happy_LureHR,Happy_NonlureHR,Fear_TargetHR,Fear_LureHR,Fear_NonlureHR,Neut_TargetHR,Neut_LureHR,Neut_NonlureHR,Place_TargetHR,Place_LureHR,Place_NonlureHR,ThreeExposure0backTargetStim,TwoExposure2backTargetStim,TwoExposure0backLureStim,TwoExposure2backLureStim,OneExposure0backStim,OneExposure2backStim] = importREC(filename, startRow, endRow)
%IMPORTFILE Import numeric data from a text file as column vectors.
%   [EXPERIMENTNAME1,SITE1,NDARGUID1,VERSION1,SESSIONDATE,HAPPY_HR,HAPPY_FA,HAPPY_PR,HAPPY_BR,HAPPY_MISS,HAPPY_CR,HAPPY_DPRIME,FEAR_HR,FEAR_FA,FEAR_PR,FEAR_BR,FEAR_MISS,FEAR_CR,FEAR_DPRIME,NEUT_HR,NEUT_FA,NEUT_PR,NEUT_BR,NEUT_MISS,NEUT_CR,NEUT_DPRIME,PLACE_HR,PLACE_FA,PLACE_PR,PLACE_BR,PLACE_MISS,PLACE_CR,PLACE_DPRIME,HAPPY0BACK_HR,FEAR0BACK_HR,NEUT0BACK_HR,PLACE0BACK_HR,HAPPY2BACK_HR,FEAR2BACK_HR,NEUT2BACK_HR,PLACE2BACK_HR,HAPPY_TARGETHR,HAPPY_LUREHR,HAPPY_NONLUREHR,FEAR_TARGETHR,FEAR_LUREHR,FEAR_NONLUREHR,NEUT_TARGETHR,NEUT_LUREHR,NEUT_NONLUREHR,PLACE_TARGETHR,PLACE_LUREHR,PLACE_NONLUREHR,THREEEXPOSURE0BACKTARGETSTIM,TWOEXPOSURE2BACKTARGETSTIM,TWOEXPOSURE0BACKLURESTIM,TWOEXPOSURE2BACKLURESTIM,ONEEXPOSURE0BACKSTIM,ONEEXPOSURE2BACKSTIM]
%   = IMPORTFILE(FILENAME) Reads data from text file FILENAME for the
%   default selection.
%
%   [EXPERIMENTNAME1,SITE1,NDARGUID1,VERSION1,SESSIONDATE,HAPPY_HR,HAPPY_FA,HAPPY_PR,HAPPY_BR,HAPPY_MISS,HAPPY_CR,HAPPY_DPRIME,FEAR_HR,FEAR_FA,FEAR_PR,FEAR_BR,FEAR_MISS,FEAR_CR,FEAR_DPRIME,NEUT_HR,NEUT_FA,NEUT_PR,NEUT_BR,NEUT_MISS,NEUT_CR,NEUT_DPRIME,PLACE_HR,PLACE_FA,PLACE_PR,PLACE_BR,PLACE_MISS,PLACE_CR,PLACE_DPRIME,HAPPY0BACK_HR,FEAR0BACK_HR,NEUT0BACK_HR,PLACE0BACK_HR,HAPPY2BACK_HR,FEAR2BACK_HR,NEUT2BACK_HR,PLACE2BACK_HR,HAPPY_TARGETHR,HAPPY_LUREHR,HAPPY_NONLUREHR,FEAR_TARGETHR,FEAR_LUREHR,FEAR_NONLUREHR,NEUT_TARGETHR,NEUT_LUREHR,NEUT_NONLUREHR,PLACE_TARGETHR,PLACE_LUREHR,PLACE_NONLUREHR,THREEEXPOSURE0BACKTARGETSTIM,TWOEXPOSURE2BACKTARGETSTIM,TWOEXPOSURE0BACKLURESTIM,TWOEXPOSURE2BACKLURESTIM,ONEEXPOSURE0BACKSTIM,ONEEXPOSURE2BACKSTIM]
%   = IMPORTFILE(FILENAME, STARTROW, ENDROW) Reads data from rows STARTROW
%   through ENDROW of text file FILENAME.
%
% Example:
%   [ExperimentName1,Site1,NDARGUID1,Version1,SessionDate,Happy_HR,Happy_FA,Happy_Pr,Happy_Br,Happy_Miss,Happy_CR,Happy_dprime,Fear_HR,Fear_FA,Fear_Pr,Fear_Br,Fear_Miss,Fear_CR,Fear_dprime,Neut_HR,Neut_FA,Neut_Pr,Neut_Br,Neut_Miss,Neut_CR,Neut_dprime,Place_HR,Place_FA,Place_Pr,Place_Br,Place_Miss,Place_CR,Place_dprime,Happy0back_HR,Fear0back_HR,Neut0back_HR,Place0back_HR,Happy2back_HR,Fear2back_HR,Neut2back_HR,Place2back_HR,Happy_TargetHR,Happy_LureHR,Happy_NonlureHR,Fear_TargetHR,Fear_LureHR,Fear_NonlureHR,Neut_TargetHR,Neut_LureHR,Neut_NonlureHR,Place_TargetHR,Place_LureHR,Place_NonlureHR,ThreeExposure0backTargetStim,TwoExposure2backTargetStim,TwoExposure0backLureStim,TwoExposure2backLureStim,OneExposure0backStim,OneExposure2backStim] = importfile('EmoNback_RECBehaviorABCD_20170106.csv',2, 154);
%
%    See also TEXTSCAN.

% Auto-generated by MATLAB on 2017/01/06 19:27:25

%% Initialize variables.
delimiter = ',';
if nargin<=2
    startRow = 2;
    endRow = inf;
end

%% Read columns of data as text:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to the format.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
textscan(fileID, '%[^\n\r]', startRow(1)-1, 'WhiteSpace', '', 'ReturnOnError', false);
dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', delimiter, 'ReturnOnError', false, 'EndOfLine', '\r\n');
for block=2:length(startRow)
    frewind(fileID);
    textscan(fileID, '%[^\n\r]', startRow(block)-1, 'WhiteSpace', '', 'ReturnOnError', false);
    dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', delimiter, 'ReturnOnError', false, 'EndOfLine', '\r\n');
    for col=1:length(dataArray)
        dataArray{col} = [dataArray{col};dataArrayBlock{col}];
    end
end

%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric text to numbers.
% Replace non-numeric text with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = dataArray{col};
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

for col=[1,4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57]
    % Converts text in the input cell array to numbers. Replaced non-numeric
    % text with NaN.
    rawData = dataArray{col};
    for row=1:size(rawData, 1);
        % Create a regular expression to detect and remove non-numeric prefixes and
        % suffixes.
        regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
        try
            result = regexp(rawData{row}, regexstr, 'names');
            numbers = result.numbers;
            
            % Detected commas in non-thousand locations.
            invalidThousandsSeparator = false;
            if any(numbers==',');
                thousandsRegExp = '^\d+?(\,\d{3})*\.{0,1}\d*$';
                if isempty(regexp(numbers, thousandsRegExp, 'once'));
                    numbers = NaN;
                    invalidThousandsSeparator = true;
                end
            end
            % Convert numeric text to numbers.
            if ~invalidThousandsSeparator;
                numbers = textscan(strrep(numbers, ',', ''), '%f');
                numericData(row, col) = numbers{1};
                raw{row, col} = numbers{1};
            end
        catch me
        end
    end
end

% Convert the contents of columns with dates to MATLAB datetimes using the
% specified date format.
try
    dates{5} = datetime(dataArray{5}, 'Format', 'dd-MMM-yyyy', 'InputFormat', 'dd-MMM-yyyy');
catch
    try
        % Handle dates surrounded by quotes
        dataArray{5} = cellfun(@(x) x(2:end-1), dataArray{5}, 'UniformOutput', false);
        dates{5} = datetime(dataArray{5}, 'Format', 'dd-MMM-yyyy', 'InputFormat', 'dd-MMM-yyyy');
    catch
        dates{5} = repmat(datetime([NaN NaN NaN]), size(dataArray{5}));
    end
end

anyBlankDates = cellfun(@isempty, dataArray{5});
anyInvalidDates = isnan(dates{5}.Hour) - anyBlankDates;
dates = dates(:,5);

%% Split data into numeric and cell columns.
rawNumericColumns = raw(:, [1,4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57]);
rawCellColumns = raw(:, [2,3,58,59]);


%% Replace non-numeric cells with NaN
R = cellfun(@(x) ~isnumeric(x) && ~islogical(x),rawNumericColumns); % Find non-numeric cells
rawNumericColumns(R) = {NaN}; % Replace non-numeric cells

%% Allocate imported array to column variable names
ExperimentName1 = cell2mat(rawNumericColumns(:, 1));
Site1 = rawCellColumns(:, 1);
NDARGUID1 = rawCellColumns(:, 2);
Version1 = cell2mat(rawNumericColumns(:, 2));
SessionDate = dates{:, 1};
Happy_HR = cell2mat(rawNumericColumns(:, 3));
Happy_FA = cell2mat(rawNumericColumns(:, 4));
Happy_Pr = cell2mat(rawNumericColumns(:, 5));
Happy_Br = cell2mat(rawNumericColumns(:, 6));
Happy_Miss = cell2mat(rawNumericColumns(:, 7));
Happy_CR = cell2mat(rawNumericColumns(:, 8));
Happy_dprime = cell2mat(rawNumericColumns(:, 9));
Fear_HR = cell2mat(rawNumericColumns(:, 10));
Fear_FA = cell2mat(rawNumericColumns(:, 11));
Fear_Pr = cell2mat(rawNumericColumns(:, 12));
Fear_Br = cell2mat(rawNumericColumns(:, 13));
Fear_Miss = cell2mat(rawNumericColumns(:, 14));
Fear_CR = cell2mat(rawNumericColumns(:, 15));
Fear_dprime = cell2mat(rawNumericColumns(:, 16));
Neut_HR = cell2mat(rawNumericColumns(:, 17));
Neut_FA = cell2mat(rawNumericColumns(:, 18));
Neut_Pr = cell2mat(rawNumericColumns(:, 19));
Neut_Br = cell2mat(rawNumericColumns(:, 20));
Neut_Miss = cell2mat(rawNumericColumns(:, 21));
Neut_CR = cell2mat(rawNumericColumns(:, 22));
Neut_dprime = cell2mat(rawNumericColumns(:, 23));
Place_HR = cell2mat(rawNumericColumns(:, 24));
Place_FA = cell2mat(rawNumericColumns(:, 25));
Place_Pr = cell2mat(rawNumericColumns(:, 26));
Place_Br = cell2mat(rawNumericColumns(:, 27));
Place_Miss = cell2mat(rawNumericColumns(:, 28));
Place_CR = cell2mat(rawNumericColumns(:, 29));
Place_dprime = cell2mat(rawNumericColumns(:, 30));
Happy0back_HR = cell2mat(rawNumericColumns(:, 31));
Fear0back_HR = cell2mat(rawNumericColumns(:, 32));
Neut0back_HR = cell2mat(rawNumericColumns(:, 33));
Place0back_HR = cell2mat(rawNumericColumns(:, 34));
Happy2back_HR = cell2mat(rawNumericColumns(:, 35));
Fear2back_HR = cell2mat(rawNumericColumns(:, 36));
Neut2back_HR = cell2mat(rawNumericColumns(:, 37));
Place2back_HR = cell2mat(rawNumericColumns(:, 38));
Happy_TargetHR = cell2mat(rawNumericColumns(:, 39));
Happy_LureHR = cell2mat(rawNumericColumns(:, 40));
Happy_NonlureHR = cell2mat(rawNumericColumns(:, 41));
Fear_TargetHR = cell2mat(rawNumericColumns(:, 42));
Fear_LureHR = cell2mat(rawNumericColumns(:, 43));
Fear_NonlureHR = cell2mat(rawNumericColumns(:, 44));
Neut_TargetHR = cell2mat(rawNumericColumns(:, 45));
Neut_LureHR = cell2mat(rawNumericColumns(:, 46));
Neut_NonlureHR = cell2mat(rawNumericColumns(:, 47));
Place_TargetHR = cell2mat(rawNumericColumns(:, 48));
Place_LureHR = cell2mat(rawNumericColumns(:, 49));
Place_NonlureHR = cell2mat(rawNumericColumns(:, 50));
ThreeExposure0backTargetStim = cell2mat(rawNumericColumns(:, 51));
TwoExposure2backTargetStim = cell2mat(rawNumericColumns(:, 52));
TwoExposure0backLureStim = cell2mat(rawNumericColumns(:, 53));
TwoExposure2backLureStim = cell2mat(rawNumericColumns(:, 54));
OneExposure0backStim = rawCellColumns(:, 3);
OneExposure2backStim = rawCellColumns(:, 4);

% For code requiring serial dates (datenum) instead of datetime, uncomment
% the following line(s) below to return the imported dates as datenum(s).

% SessionDate=datenum(SessionDate);


