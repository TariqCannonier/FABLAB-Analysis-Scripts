function WM = importWMtable(filename, startRow, endRow)
%IMPORTFILE Import numeric data from a text file as a matrix.
%   WM = IMPORTFILE(FILENAME) Reads data from text file FILENAME for the
%   default selection.
%
%   WM = IMPORTFILE(FILENAME, STARTROW, ENDROW) Reads data from rows
%   STARTROW through ENDROW of text file FILENAME.
%
% Example:
%   WM = importfile('EmoNback_WMBehaviorABCD_20170224.csv', 2, 966);
%
%    See also TEXTSCAN.

% Auto-generated by MATLAB on 2017/02/27 10:46:37

%% Initialize variables.
delimiter = ',';
if nargin<=2
    startRow = 2;
    endRow = inf;
end

%% Read columns of data as text:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to the format.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', delimiter, 'HeaderLines', startRow(1)-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
for block=2:length(startRow)
    frewind(fileID);
    dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', delimiter, 'HeaderLines', startRow(block)-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
    for col=1:length(dataArray)
        dataArray{col} = [dataArray{col};dataArrayBlock{col}];
    end
end

%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric text to numbers.
% Replace non-numeric text with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = dataArray{col};
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

for col=[1,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101]
    % Converts text in the input cell array to numbers. Replaced non-numeric
    % text with NaN.
    rawData = dataArray{col};
    for row=1:size(rawData, 1);
        % Create a regular expression to detect and remove non-numeric prefixes and
        % suffixes.
        regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
        try
            result = regexp(rawData{row}, regexstr, 'names');
            numbers = result.numbers;
            
            % Detected commas in non-thousand locations.
            invalidThousandsSeparator = false;
            if any(numbers==',');
                thousandsRegExp = '^\d+?(\,\d{3})*\.{0,1}\d*$';
                if isempty(regexp(numbers, thousandsRegExp, 'once'));
                    numbers = NaN;
                    invalidThousandsSeparator = true;
                end
            end
            % Convert numeric text to numbers.
            if ~invalidThousandsSeparator;
                numbers = textscan(strrep(numbers, ',', ''), '%f');
                numericData(row, col) = numbers{1};
                raw{row, col} = numbers{1};
            end
        catch me
        end
    end
end


%% Split data into numeric and cell columns.
rawNumericColumns = raw(:, [1,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101]);
rawCellColumns = raw(:, [2,3]);


%% Replace non-numeric cells with NaN
R = cellfun(@(x) ~isnumeric(x) && ~islogical(x),rawNumericColumns); % Find non-numeric cells
rawNumericColumns(R) = {NaN}; % Replace non-numeric cells

%% Create output variable
WM = table;
WM.ExperimentName = cell2mat(rawNumericColumns(:, 1));
WM.Site = rawCellColumns(:, 1);
WM.NDARGUID = rawCellColumns(:, 2);
WM.Version = cell2mat(rawNumericColumns(:, 2));
WM.Overall_RT = cell2mat(rawNumericColumns(:, 3));
WM.Overall_ACC = cell2mat(rawNumericColumns(:, 4));
WM.HappyBlocks_RT = cell2mat(rawNumericColumns(:, 5));
WM.HappyBlocks_ACC = cell2mat(rawNumericColumns(:, 6));
WM.FearBlocks_RT = cell2mat(rawNumericColumns(:, 7));
WM.FearBlocks_ACC = cell2mat(rawNumericColumns(:, 8));
WM.NeutBlocks_RT = cell2mat(rawNumericColumns(:, 9));
WM.NeutBlocks_ACC = cell2mat(rawNumericColumns(:, 10));
WM.PlaceBlocks_RT = cell2mat(rawNumericColumns(:, 11));
WM.PlaceBlocks_ACC = cell2mat(rawNumericColumns(:, 12));
WM.Overall0back_RT = cell2mat(rawNumericColumns(:, 13));
WM.Overall0back_ACC = cell2mat(rawNumericColumns(:, 14));
WM.Happy0back_RT = cell2mat(rawNumericColumns(:, 15));
WM.Happy0back_ACC = cell2mat(rawNumericColumns(:, 16));
WM.Fear0back_RT = cell2mat(rawNumericColumns(:, 17));
WM.Fear0back_ACC = cell2mat(rawNumericColumns(:, 18));
WM.Neut0back_RT = cell2mat(rawNumericColumns(:, 19));
WM.Neut0back_ACC = cell2mat(rawNumericColumns(:, 20));
WM.Place0back_RT = cell2mat(rawNumericColumns(:, 21));
WM.Place0back_ACC = cell2mat(rawNumericColumns(:, 22));
WM.Overall2back_RT = cell2mat(rawNumericColumns(:, 23));
WM.Overall2back_ACC = cell2mat(rawNumericColumns(:, 24));
WM.Happy2back_RT = cell2mat(rawNumericColumns(:, 25));
WM.Happy2back_ACC = cell2mat(rawNumericColumns(:, 26));
WM.Fear2back_RT = cell2mat(rawNumericColumns(:, 27));
WM.Fear2back_ACC = cell2mat(rawNumericColumns(:, 28));
WM.Neut2back_RT = cell2mat(rawNumericColumns(:, 29));
WM.Neut2back_ACC = cell2mat(rawNumericColumns(:, 30));
WM.Place2back_RT = cell2mat(rawNumericColumns(:, 31));
WM.Place2back_ACC = cell2mat(rawNumericColumns(:, 32));
WM.run1Overall_RT = cell2mat(rawNumericColumns(:, 33));
WM.run1Overall_ACC = cell2mat(rawNumericColumns(:, 34));
WM.run1HappyBlocks_RT = cell2mat(rawNumericColumns(:, 35));
WM.run1HappyBlocks_ACC = cell2mat(rawNumericColumns(:, 36));
WM.run1FearBlocks_RT = cell2mat(rawNumericColumns(:, 37));
WM.run1FearBlocks_ACC = cell2mat(rawNumericColumns(:, 38));
WM.run1NeutBlocks_RT = cell2mat(rawNumericColumns(:, 39));
WM.run1NeutBlocks_ACC = cell2mat(rawNumericColumns(:, 40));
WM.run1PlaceBlocks_RT = cell2mat(rawNumericColumns(:, 41));
WM.run1PlaceBlocks_ACC = cell2mat(rawNumericColumns(:, 42));
WM.run1Happy0back_RT = cell2mat(rawNumericColumns(:, 43));
WM.run1Happy0back_ACC = cell2mat(rawNumericColumns(:, 44));
WM.run1Fear0back_RT = cell2mat(rawNumericColumns(:, 45));
WM.run1Fear0back_ACC = cell2mat(rawNumericColumns(:, 46));
WM.run1Neut0back_RT = cell2mat(rawNumericColumns(:, 47));
WM.run1Neut0back_ACC = cell2mat(rawNumericColumns(:, 48));
WM.run1Place0back_RT = cell2mat(rawNumericColumns(:, 49));
WM.run1Place0back_ACC = cell2mat(rawNumericColumns(:, 50));
WM.run1Happy2back_RT = cell2mat(rawNumericColumns(:, 51));
WM.run1Happy2back_ACC = cell2mat(rawNumericColumns(:, 52));
WM.run1Fear2back_RT = cell2mat(rawNumericColumns(:, 53));
WM.run1Fear2back_ACC = cell2mat(rawNumericColumns(:, 54));
WM.run1Neut2back_RT = cell2mat(rawNumericColumns(:, 55));
WM.run1Neut2back_ACC = cell2mat(rawNumericColumns(:, 56));
WM.run1Place2back_RT = cell2mat(rawNumericColumns(:, 57));
WM.run1Place2back_ACC = cell2mat(rawNumericColumns(:, 58));
WM.run2Overall_RT = cell2mat(rawNumericColumns(:, 59));
WM.run2Overall_ACC = cell2mat(rawNumericColumns(:, 60));
WM.run2HappyBlocks_RT = cell2mat(rawNumericColumns(:, 61));
WM.run2HappyBlocks_ACC = cell2mat(rawNumericColumns(:, 62));
WM.run2FearBlocks_RT = cell2mat(rawNumericColumns(:, 63));
WM.run2FearBlocks_ACC = cell2mat(rawNumericColumns(:, 64));
WM.run2NeutBlocks_RT = cell2mat(rawNumericColumns(:, 65));
WM.run2NeutBlocks_ACC = cell2mat(rawNumericColumns(:, 66));
WM.run2PlaceBlocks_RT = cell2mat(rawNumericColumns(:, 67));
WM.run2PlaceBlocks_ACC = cell2mat(rawNumericColumns(:, 68));
WM.run2Happy0back_RT = cell2mat(rawNumericColumns(:, 69));
WM.run2Happy0back_ACC = cell2mat(rawNumericColumns(:, 70));
WM.run2Fear0back_RT = cell2mat(rawNumericColumns(:, 71));
WM.run2Fear0back_ACC = cell2mat(rawNumericColumns(:, 72));
WM.run2Neut0back_RT = cell2mat(rawNumericColumns(:, 73));
WM.run2Neut0back_ACC = cell2mat(rawNumericColumns(:, 74));
WM.run2Place0back_RT = cell2mat(rawNumericColumns(:, 75));
WM.run2Place0back_ACC = cell2mat(rawNumericColumns(:, 76));
WM.run2Happy2back_RT = cell2mat(rawNumericColumns(:, 77));
WM.run2Happy2back_ACC = cell2mat(rawNumericColumns(:, 78));
WM.run2Fear2back_RT = cell2mat(rawNumericColumns(:, 79));
WM.run2Fear2back_ACC = cell2mat(rawNumericColumns(:, 80));
WM.run2Neut2back_RT = cell2mat(rawNumericColumns(:, 81));
WM.run2Neut2back_ACC = cell2mat(rawNumericColumns(:, 82));
WM.run2Place2back_RT = cell2mat(rawNumericColumns(:, 83));
WM.run2Place2back_ACC = cell2mat(rawNumericColumns(:, 84));
WM.Nonlure_ACC = cell2mat(rawNumericColumns(:, 85));
WM.Lure_ACC = cell2mat(rawNumericColumns(:, 86));
WM.Target_ACC = cell2mat(rawNumericColumns(:, 87));
WM.HappyTargetHR = cell2mat(rawNumericColumns(:, 88));
WM.HappyLureFA = cell2mat(rawNumericColumns(:, 89));
WM.HappyNonlureFA = cell2mat(rawNumericColumns(:, 90));
WM.FearTargetHR = cell2mat(rawNumericColumns(:, 91));
WM.FearLureFA = cell2mat(rawNumericColumns(:, 92));
WM.FearNonlureFA = cell2mat(rawNumericColumns(:, 93));
WM.NeutTargetHR = cell2mat(rawNumericColumns(:, 94));
WM.NeutLureFA = cell2mat(rawNumericColumns(:, 95));
WM.NeutNonlureFA = cell2mat(rawNumericColumns(:, 96));
WM.PlaceTargetHR = cell2mat(rawNumericColumns(:, 97));
WM.PlaceLureFA = cell2mat(rawNumericColumns(:, 98));
WM.PlaceNonlureFA = cell2mat(rawNumericColumns(:, 99));

