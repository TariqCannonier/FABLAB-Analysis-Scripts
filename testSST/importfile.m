function dataTable = importfile(filename, startRow, endRow)
%IMPORTFILE1 Import numeric data from a text file as a matrix.
%   dataTable = IMPORTFILE1(FILENAME) Reads data from text file FILENAME for
%   the default selection.
%
%   dataTable = IMPORTFILE1(FILENAME, STARTROW, ENDROW) Reads data from rows
%   STARTROW through ENDROW of text file FILENAME.
%
% Example:
%   dataTable = importfile1('sst1-nick.txt', 3, 368);
%
%    See also TEXTSCAN.

% Auto-generated by MATLAB on 2017/03/27 12:26:56

%% Initialize variables.
delimiter = {'\t',','};
if nargin<=2
    startRow = 3;
    endRow = inf;
end

%% Read columns of data as strings:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to format string.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', delimiter, 'HeaderLines', startRow(1)-1, 'ReturnOnError', false);
for block=2:length(startRow)
    frewind(fileID);
    dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', delimiter, 'HeaderLines', startRow(block)-1, 'ReturnOnError', false);
    for col=1:length(dataArray)
        dataArray{col} = [dataArray{col};dataArrayBlock{col}];
    end
end

%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric strings to numbers.
% Replace non-numeric strings with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = dataArray{col};
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

for col=[1,2,3,4,7,9,11,13,14,21,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,60,61,62,63,64,65,66,67,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,88,89,90,91,92,93,94,95,97,98,99,100,101,102,103,104,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,129,130,131,132,133,134,135,136]
    % Converts strings in the input cell array to numbers. Replaced non-numeric
    % strings with NaN.
    rawData = dataArray{col};
    for row=1:size(rawData, 1);
        % Create a regular expression to detect and remove non-numeric prefixes and
        % suffixes.
        regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
        try
            result = regexp(rawData{row}, regexstr, 'names');
            numbers = result.numbers;
            
            % Detected commas in non-thousand locations.
            invalidThousandsSeparator = false;
            if any(numbers==',');
                thousandsRegExp = '^\d+?(\,\d{3})*\.{0,1}\d*$';
                if isempty(regexp(numbers, thousandsRegExp, 'once'));
                    numbers = NaN;
                    invalidThousandsSeparator = true;
                end
            end
            % Convert numeric strings to numbers.
            if ~invalidThousandsSeparator;
                numbers = textscan(strrep(numbers, ',', ''), '%f');
                numericData(row, col) = numbers{1};
                raw{row, col} = numbers{1};
            end
        catch me
        end
    end
end

% Convert the contents of columns with dates to MATLAB datetimes using date
% format string.
try
    dates{20} = datetime(dataArray{20}, 'Format', 'HH:mm:ss', 'InputFormat', 'HH:mm:ss');
catch
    try
        % Handle dates surrounded by quotes
        dataArray{20} = cellfun(@(x) x(2:end-1), dataArray{20}, 'UniformOutput', false);
        dates{20} = datetime(dataArray{20}, 'Format', 'HH:mm:ss', 'InputFormat', 'HH:mm:ss');
    catch
        dates{20} = repmat(datetime([NaN NaN NaN]), size(dataArray{20}));
    end
end

anyBlankDates = cellfun(@isempty, dataArray{20});
anyInvalidDates = isnan(dates{20}.Hour) - anyBlankDates;
dates = dates(:,20);

%% Split data into numeric and cell columns.
rawNumericColumns = raw(:, [1,2,3,4,7,9,11,13,14,21,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,60,61,62,63,64,65,66,67,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,88,89,90,91,92,93,94,95,97,98,99,100,101,102,103,104,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,129,130,131,132,133,134,135,136]);
rawCellColumns = raw(:, [5,6,8,10,12,15,16,17,18,19,22,50,51,52,53,54,55,56,57,58,59,68,87,96,105,128]);


%% Replace non-numeric cells with NaN
R = cellfun(@(x) ~isnumeric(x) && ~islogical(x),rawNumericColumns); % Find non-numeric cells
rawNumericColumns(R) = {NaN}; % Replace non-numeric cells

%% Create output variable
dataTable = table;
dataTable.ExperimentName = cell2mat(rawNumericColumns(:, 1));
dataTable.Subject = cell2mat(rawNumericColumns(:, 2));
dataTable.Session = cell2mat(rawNumericColumns(:, 3));
dataTable.Allowed = cell2mat(rawNumericColumns(:, 4));
dataTable.ClockInformation = rawCellColumns(:, 1);
dataTable.DataFileBasename = rawCellColumns(:, 2);
dataTable.DisplayRefreshRate = cell2mat(rawNumericColumns(:, 5));
dataTable.ExperimentVersion = rawCellColumns(:, 3);
dataTable.Group = cell2mat(rawNumericColumns(:, 6));
dataTable.Handedness = rawCellColumns(:, 4);
dataTable.leftarrow = cell2mat(rawNumericColumns(:, 7));
dataTable.NARGUID = rawCellColumns(:, 5);
dataTable.RandomSeed = cell2mat(rawNumericColumns(:, 8));
dataTable.rightarrow = cell2mat(rawNumericColumns(:, 9));
dataTable.RuntimeCapabilities = rawCellColumns(:, 6);
dataTable.RuntimeVersion = rawCellColumns(:, 7);
dataTable.RuntimeVersionExpected = rawCellColumns(:, 8);
dataTable.SessionDate = rawCellColumns(:, 9);
dataTable.SessionStartDateTimeUtc = rawCellColumns(:, 10);
dataTable.SessionTime = dates{:, 1};
dataTable.SSTversion = cell2mat(rawNumericColumns(:, 10));
dataTable.StudioVersion = rawCellColumns(:, 11);
dataTable.triggercode = cell2mat(rawNumericColumns(:, 11));
dataTable.Block = cell2mat(rawNumericColumns(:, 12));
dataTable.ProcedureBlock = cell2mat(rawNumericColumns(:, 13));
dataTable.RunningBlock = cell2mat(rawNumericColumns(:, 14));
dataTable.v01SessionProcList = cell2mat(rawNumericColumns(:, 15));
dataTable.v01SessionProcListCycle = cell2mat(rawNumericColumns(:, 16));
dataTable.v01SessionProcListSample = cell2mat(rawNumericColumns(:, 17));
dataTable.Trial = cell2mat(rawNumericColumns(:, 18));
dataTable.ProcedureTrial = cell2mat(rawNumericColumns(:, 19));
dataTable.RunningTrial = cell2mat(rawNumericColumns(:, 20));
dataTable.TestBlock1A = cell2mat(rawNumericColumns(:, 21));
dataTable.TestBlock1ACycle = cell2mat(rawNumericColumns(:, 22));
dataTable.TestBlock1ASample = cell2mat(rawNumericColumns(:, 23));
dataTable.TestBlock1B = cell2mat(rawNumericColumns(:, 24));
dataTable.TestBlock1BCycle = cell2mat(rawNumericColumns(:, 25));
dataTable.TestBlock1BSample = cell2mat(rawNumericColumns(:, 26));
dataTable.SubTrial = cell2mat(rawNumericColumns(:, 27));
dataTable.BeginFixDuration = cell2mat(rawNumericColumns(:, 28));
dataTable.BeginFixDurationError = cell2mat(rawNumericColumns(:, 29));
dataTable.BeginFixFinishTime = cell2mat(rawNumericColumns(:, 30));
dataTable.BeginFixOffsetDelay = cell2mat(rawNumericColumns(:, 31));
dataTable.BeginFixOffsetTime = cell2mat(rawNumericColumns(:, 32));
dataTable.BeginFixOnsetDelay = cell2mat(rawNumericColumns(:, 33));
dataTable.BeginFixOnsetTime = cell2mat(rawNumericColumns(:, 34));
dataTable.BeginFixOnsetToOnsetTime = cell2mat(rawNumericColumns(:, 35));
dataTable.BeginFixStartTime = cell2mat(rawNumericColumns(:, 36));
dataTable.CorrectAnswer = cell2mat(rawNumericColumns(:, 37));
dataTable.EndFixDuration = rawCellColumns(:, 12);
dataTable.EndFixDurationError = rawCellColumns(:, 13);
dataTable.EndFixFinishTime = rawCellColumns(:, 14);
dataTable.EndFixOffsetDelay = rawCellColumns(:, 15);
dataTable.EndFixOffsetTime = rawCellColumns(:, 16);
dataTable.EndFixOnsetDelay = rawCellColumns(:, 17);
dataTable.EndFixOnsetTime = rawCellColumns(:, 18);
dataTable.EndFixOnsetToOnsetTime = rawCellColumns(:, 19);
dataTable.EndFixStartTime = rawCellColumns(:, 20);
dataTable.EndFixDur = rawCellColumns(:, 21);
dataTable.FixDuration = cell2mat(rawNumericColumns(:, 38));
dataTable.FixDurationError = cell2mat(rawNumericColumns(:, 39));
dataTable.FixFinishTime = cell2mat(rawNumericColumns(:, 40));
dataTable.FixOffsetDelay = cell2mat(rawNumericColumns(:, 41));
dataTable.FixOffsetTime = cell2mat(rawNumericColumns(:, 42));
dataTable.FixOnsetDelay = cell2mat(rawNumericColumns(:, 43));
dataTable.FixOnsetTime = cell2mat(rawNumericColumns(:, 44));
dataTable.FixOnsetToOnsetTime = cell2mat(rawNumericColumns(:, 45));
dataTable.FixRESP = rawCellColumns(:, 22);
dataTable.FixRT = cell2mat(rawNumericColumns(:, 46));
dataTable.FixStartTime = cell2mat(rawNumericColumns(:, 47));
dataTable.FixDur = cell2mat(rawNumericColumns(:, 48));
dataTable.GoACC = cell2mat(rawNumericColumns(:, 49));
dataTable.GoCRESP = cell2mat(rawNumericColumns(:, 50));
dataTable.GoDuration = cell2mat(rawNumericColumns(:, 51));
dataTable.GoDurationError = cell2mat(rawNumericColumns(:, 52));
dataTable.GoFinishTime = cell2mat(rawNumericColumns(:, 53));
dataTable.GoOffsetDelay = cell2mat(rawNumericColumns(:, 54));
dataTable.GoOffsetTime = cell2mat(rawNumericColumns(:, 55));
dataTable.GoOnsetDelay = cell2mat(rawNumericColumns(:, 56));
dataTable.GoOnsetTime = cell2mat(rawNumericColumns(:, 57));
dataTable.GoOnsetToOnsetTime = cell2mat(rawNumericColumns(:, 58));
dataTable.GoRESP = cell2mat(rawNumericColumns(:, 59));
dataTable.GoRT = cell2mat(rawNumericColumns(:, 60));
dataTable.GoRTTime = cell2mat(rawNumericColumns(:, 61));
dataTable.GoStartTime = cell2mat(rawNumericColumns(:, 62));
dataTable.Jitter = cell2mat(rawNumericColumns(:, 63));
dataTable.ProcedureSubTrial = rawCellColumns(:, 23);
dataTable.RunningSubTrial = cell2mat(rawNumericColumns(:, 64));
dataTable.SiemensPadOffsetDelay = cell2mat(rawNumericColumns(:, 65));
dataTable.SiemensPadOffsetTime = cell2mat(rawNumericColumns(:, 66));
dataTable.SiemensPadOnsetDelay = cell2mat(rawNumericColumns(:, 67));
dataTable.SiemensPadOnsetTime = cell2mat(rawNumericColumns(:, 68));
dataTable.SiemensPadOnsetToOnsetTime = cell2mat(rawNumericColumns(:, 69));
dataTable.SiemensPadRTTime = cell2mat(rawNumericColumns(:, 70));
dataTable.SSDACC = cell2mat(rawNumericColumns(:, 71));
dataTable.SSDCRESP = rawCellColumns(:, 24);
dataTable.SSDDurationError = cell2mat(rawNumericColumns(:, 72));
dataTable.SSDOnsetDelay = cell2mat(rawNumericColumns(:, 73));
dataTable.SSDOnsetTime = cell2mat(rawNumericColumns(:, 74));
dataTable.SSDOnsetToOnsetTime = cell2mat(rawNumericColumns(:, 75));
dataTable.SSDRESP = cell2mat(rawNumericColumns(:, 76));
dataTable.SSDRT = cell2mat(rawNumericColumns(:, 77));
dataTable.SSDRTTime = cell2mat(rawNumericColumns(:, 78));
dataTable.SSDDur = cell2mat(rawNumericColumns(:, 79));
dataTable.Stimulus = rawCellColumns(:, 25);
dataTable.Stop_nback = cell2mat(rawNumericColumns(:, 80));
dataTable.StopDur = cell2mat(rawNumericColumns(:, 81));
dataTable.StopSignalACC = cell2mat(rawNumericColumns(:, 82));
dataTable.StopSignalCRESP = cell2mat(rawNumericColumns(:, 83));
dataTable.StopSignalDuration = cell2mat(rawNumericColumns(:, 84));
dataTable.StopSignalDurationError = cell2mat(rawNumericColumns(:, 85));
dataTable.StopSignalFinishTime = cell2mat(rawNumericColumns(:, 86));
dataTable.StopSignalOffsetDelay = cell2mat(rawNumericColumns(:, 87));
dataTable.StopSignalOffsetTime = cell2mat(rawNumericColumns(:, 88));
dataTable.StopSignalOnsetDelay = cell2mat(rawNumericColumns(:, 89));
dataTable.StopSignalOnsetTime = cell2mat(rawNumericColumns(:, 90));
dataTable.StopSignalOnsetToOnsetTime = cell2mat(rawNumericColumns(:, 91));
dataTable.StopSignalRESP = cell2mat(rawNumericColumns(:, 92));
dataTable.StopSignalRT = cell2mat(rawNumericColumns(:, 93));
dataTable.StopSignalRTTime = cell2mat(rawNumericColumns(:, 94));
dataTable.StopSignalStartTime = cell2mat(rawNumericColumns(:, 95));
dataTable.TestList1A = cell2mat(rawNumericColumns(:, 96));
dataTable.TestList1ACycle = cell2mat(rawNumericColumns(:, 97));
dataTable.TestList1ASample = cell2mat(rawNumericColumns(:, 98));
dataTable.TestList1B = cell2mat(rawNumericColumns(:, 99));
dataTable.TestList1BCycle = cell2mat(rawNumericColumns(:, 100));
dataTable.TestList1BSample = cell2mat(rawNumericColumns(:, 101));
dataTable.TrialCode = rawCellColumns(:, 26);
dataTable.Wait4ScannerRTTime = cell2mat(rawNumericColumns(:, 102));
dataTable.Wait4ScannerBRTTime = cell2mat(rawNumericColumns(:, 103));
dataTable.Waiting4Scanner = cell2mat(rawNumericColumns(:, 104));
dataTable.Waiting4ScannerCycle = cell2mat(rawNumericColumns(:, 105));
dataTable.Waiting4ScannerSample = cell2mat(rawNumericColumns(:, 106));
dataTable.Waiting4ScannerB = cell2mat(rawNumericColumns(:, 107));
dataTable.Waiting4ScannerBCycle = cell2mat(rawNumericColumns(:, 108));
dataTable.Waiting4ScannerBSample = cell2mat(rawNumericColumns(:, 109));

% For code requiring serial dates (datenum) instead of datetime, uncomment
% the following line(s) below to return the imported dates as datenum(s).

% sst1nick.SessionTime=datenum(sst1nick.SessionTime);

