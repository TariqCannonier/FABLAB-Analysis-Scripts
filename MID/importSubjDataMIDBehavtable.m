function subDataSST = importSubjDataMIDBehavtable(filename, startRow, endRow)
%IMPORTFILE Import numeric data from a text file as a matrix.
%   NDARINV81W1WMVMMID = IMPORTFILE(FILENAME) Reads data from text file
%   FILENAME for the default selection.
%
%   NDARINV81W1WMVMMID = IMPORTFILE(FILENAME, STARTROW, ENDROW) Reads data
%   from rows STARTROW through ENDROW of text file FILENAME.
%
% Example:
%   NDARINV81W1WMVMMID = importfile('NDAR_INV81W1WMVM_MID.txt', 2, 106);
%
%    See also TEXTSCAN.

% Auto-generated by MATLAB on 2017/03/16 11:39:20

%% Initialize variables.
delimiter = {'\t',','};
if nargin<=2
    startRow = 2;
    endRow = inf;
end

%% Read columns of data as text:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to the format.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', delimiter, 'HeaderLines', startRow(1)-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
for block=2:length(startRow)
    frewind(fileID);
    dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', delimiter, 'HeaderLines', startRow(block)-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
    for col=1:length(dataArray)
        dataArray{col} = [dataArray{col};dataArrayBlock{col}];
    end
end

%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric text to numbers.
% Replace non-numeric text with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = dataArray{col};
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

for col=[1,2,3,7,9,12,13,21,23,24,25,26,27,28,29,30,31,32,33,34,35,36,39,40,41,42,43,44,45,46,47,48,49,50,51,52,55,56,57,58,59,60,61,62,63,64,65,66,67,68,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,96,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129]
    % Converts text in the input cell array to numbers. Replaced non-numeric
    % text with NaN.
    rawData = dataArray{col};
    for row=1:size(rawData, 1);
        % Create a regular expression to detect and remove non-numeric prefixes and
        % suffixes.
        regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
        try
            result = regexp(rawData{row}, regexstr, 'names');
            numbers = result.numbers;
            
            % Detected commas in non-thousand locations.
            invalidThousandsSeparator = false;
            if any(numbers==',');
                thousandsRegExp = '^\d+?(\,\d{3})*\.{0,1}\d*$';
                if isempty(regexp(numbers, thousandsRegExp, 'once'));
                    numbers = NaN;
                    invalidThousandsSeparator = true;
                end
            end
            % Convert numeric text to numbers.
            if ~invalidThousandsSeparator;
                numbers = textscan(strrep(numbers, ',', ''), '%f');
                numericData(row, col) = numbers{1};
                raw{row, col} = numbers{1};
            end
        catch me
        end
    end
end

% Convert the contents of columns with dates to MATLAB datetimes using the
% specified date format.
try
    dates{19} = datetime(dataArray{19}, 'Format', 'HH:mm:ss', 'InputFormat', 'HH:mm:ss');
catch
    try
        % Handle dates surrounded by quotes
        dataArray{19} = cellfun(@(x) x(2:end-1), dataArray{19}, 'UniformOutput', false);
        dates{19} = datetime(dataArray{19}, 'Format', 'HH:mm:ss', 'InputFormat', 'HH:mm:ss');
    catch
        dates{19} = repmat(datetime([NaN NaN NaN]), size(dataArray{19}));
    end
end

anyBlankDates = cellfun(@isempty, dataArray{19});
anyInvalidDates = isnan(dates{19}.Hour) - anyBlankDates;
dates = dates(:,19);

%% Split data into numeric and cell columns.
rawNumericColumns = raw(:, [1,2,3,7,9,12,13,21,23,24,25,26,27,28,29,30,31,32,33,34,35,36,39,40,41,42,43,44,45,46,47,48,49,50,51,52,55,56,57,58,59,60,61,62,63,64,65,66,67,68,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,96,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129]);
rawCellColumns = raw(:, [4,5,6,8,10,11,14,15,16,17,18,20,22,37,38,53,54,69,70,95,97]);


%% Replace non-numeric cells with NaN
R = cellfun(@(x) ~isnumeric(x) && ~islogical(x),rawNumericColumns); % Find non-numeric cells
rawNumericColumns(R) = {NaN}; % Replace non-numeric cells

%% Create output variable
subDataSST = table;
subDataSST.ExperimentName = cell2mat(rawNumericColumns(:, 1));
subDataSST.Subject = cell2mat(rawNumericColumns(:, 2));
subDataSST.Session = cell2mat(rawNumericColumns(:, 3));
subDataSST.Allowed = rawCellColumns(:, 1);
subDataSST.ClockInformation = rawCellColumns(:, 2);
subDataSST.DataFileBasename = rawCellColumns(:, 3);
subDataSST.DisplayRefreshRate = cell2mat(rawNumericColumns(:, 4));
subDataSST.ExperimentVersion = rawCellColumns(:, 4);
subDataSST.Group = cell2mat(rawNumericColumns(:, 5));
subDataSST.Handedness = rawCellColumns(:, 5);
subDataSST.NARGUID = rawCellColumns(:, 6);
subDataSST.PracticeRT = cell2mat(rawNumericColumns(:, 6));
subDataSST.RandomSeed = cell2mat(rawNumericColumns(:, 7));
subDataSST.RuntimeCapabilities = rawCellColumns(:, 7);
subDataSST.RuntimeVersion = rawCellColumns(:, 8);
subDataSST.RuntimeVersionExpected = rawCellColumns(:, 9);
subDataSST.SessionDate = rawCellColumns(:, 10);
subDataSST.SessionStartDateTimeUtc = rawCellColumns(:, 11);
subDataSST.SessionTime = dates{:, 1};
subDataSST.StudioVersion = rawCellColumns(:, 12);
subDataSST.TrialOrder = cell2mat(rawNumericColumns(:, 8));
subDataSST.triggercode = rawCellColumns(:, 13);
subDataSST.Block = cell2mat(rawNumericColumns(:, 9));
subDataSST.BlockList = cell2mat(rawNumericColumns(:, 10));
subDataSST.BlockListCycle = cell2mat(rawNumericColumns(:, 11));
subDataSST.BlockListSample = cell2mat(rawNumericColumns(:, 12));
subDataSST.BlockTitle = cell2mat(rawNumericColumns(:, 13));
subDataSST.EndFixDuration = cell2mat(rawNumericColumns(:, 14));
subDataSST.EndFixDurationError = cell2mat(rawNumericColumns(:, 15));
subDataSST.EndFixFinishTime = cell2mat(rawNumericColumns(:, 16));
subDataSST.EndFixOffsetDelay = cell2mat(rawNumericColumns(:, 17));
subDataSST.EndFixOffsetTime = cell2mat(rawNumericColumns(:, 18));
subDataSST.EndFixOnsetDelay = cell2mat(rawNumericColumns(:, 19));
subDataSST.EndFixOnsetTime = cell2mat(rawNumericColumns(:, 20));
subDataSST.EndFixOnsetToOnsetTime = cell2mat(rawNumericColumns(:, 21));
subDataSST.EndFixStartTime = cell2mat(rawNumericColumns(:, 22));
subDataSST.ProcedureBlock = rawCellColumns(:, 14);
subDataSST.RunningBlock = rawCellColumns(:, 15);
subDataSST.Trial = cell2mat(rawNumericColumns(:, 23));
subDataSST.GetReadyRTTime = cell2mat(rawNumericColumns(:, 24));
subDataSST.PeriodList = cell2mat(rawNumericColumns(:, 25));
subDataSST.PeriodListCycle = cell2mat(rawNumericColumns(:, 26));
subDataSST.PeriodListSample = cell2mat(rawNumericColumns(:, 27));
subDataSST.PrepTimeDuration = cell2mat(rawNumericColumns(:, 28));
subDataSST.PrepTimeDurationError = cell2mat(rawNumericColumns(:, 29));
subDataSST.PrepTimeFinishTime = cell2mat(rawNumericColumns(:, 30));
subDataSST.PrepTimeOffsetDelay = cell2mat(rawNumericColumns(:, 31));
subDataSST.PrepTimeOffsetTime = cell2mat(rawNumericColumns(:, 32));
subDataSST.PrepTimeOnsetDelay = cell2mat(rawNumericColumns(:, 33));
subDataSST.PrepTimeOnsetTime = cell2mat(rawNumericColumns(:, 34));
subDataSST.PrepTimeOnsetToOnsetTime = cell2mat(rawNumericColumns(:, 35));
subDataSST.PrepTimeStartTime = cell2mat(rawNumericColumns(:, 36));
subDataSST.ProcedureTrial = rawCellColumns(:, 16);
subDataSST.RunningTrial = rawCellColumns(:, 17);
subDataSST.Waiting4Scanner = cell2mat(rawNumericColumns(:, 37));
subDataSST.Waiting4ScannerCycle = cell2mat(rawNumericColumns(:, 38));
subDataSST.Waiting4ScannerSample = cell2mat(rawNumericColumns(:, 39));
subDataSST.SubTrial = cell2mat(rawNumericColumns(:, 40));
subDataSST.AnticipationDuration = cell2mat(rawNumericColumns(:, 41));
subDataSST.AnticipationDurationError = cell2mat(rawNumericColumns(:, 42));
subDataSST.AnticipationFinishTime = cell2mat(rawNumericColumns(:, 43));
subDataSST.AnticipationOffsetDelay = cell2mat(rawNumericColumns(:, 44));
subDataSST.AnticipationOffsetTime = cell2mat(rawNumericColumns(:, 45));
subDataSST.AnticipationOnsetDelay = cell2mat(rawNumericColumns(:, 46));
subDataSST.AnticipationOnsetTime = cell2mat(rawNumericColumns(:, 47));
subDataSST.AnticipationOnsetToOnsetTime = cell2mat(rawNumericColumns(:, 48));
subDataSST.AnticipationStartTime = cell2mat(rawNumericColumns(:, 49));
subDataSST.AnticipationDuration1 = cell2mat(rawNumericColumns(:, 50));
subDataSST.Condition = rawCellColumns(:, 18);
subDataSST.Cue = rawCellColumns(:, 19);
subDataSST.CueCustomOnsetTime = cell2mat(rawNumericColumns(:, 51));
subDataSST.CueDuration = cell2mat(rawNumericColumns(:, 52));
subDataSST.CueDurationError = cell2mat(rawNumericColumns(:, 53));
subDataSST.CueFinishTime = cell2mat(rawNumericColumns(:, 54));
subDataSST.CueOffsetDelay = cell2mat(rawNumericColumns(:, 55));
subDataSST.CueOffsetTime = cell2mat(rawNumericColumns(:, 56));
subDataSST.CueOnsetDelay = cell2mat(rawNumericColumns(:, 57));
subDataSST.CueOnsetTime = cell2mat(rawNumericColumns(:, 58));
subDataSST.CueOnsetToOnsetTime = cell2mat(rawNumericColumns(:, 59));
subDataSST.CueStartTime = cell2mat(rawNumericColumns(:, 60));
subDataSST.FeedbackDuration = cell2mat(rawNumericColumns(:, 61));
subDataSST.FeedbackDurationError = cell2mat(rawNumericColumns(:, 62));
subDataSST.FeedbackFinishTime = cell2mat(rawNumericColumns(:, 63));
subDataSST.FeedbackOffsetDelay = cell2mat(rawNumericColumns(:, 64));
subDataSST.FeedbackOffsetTime = cell2mat(rawNumericColumns(:, 65));
subDataSST.FeedbackOnsetDelay = cell2mat(rawNumericColumns(:, 66));
subDataSST.FeedbackOnsetTime = cell2mat(rawNumericColumns(:, 67));
subDataSST.FeedbackOnsetToOnsetTime = cell2mat(rawNumericColumns(:, 68));
subDataSST.FeedbackStartTime = cell2mat(rawNumericColumns(:, 69));
subDataSST.FeedbackDuration1 = cell2mat(rawNumericColumns(:, 70));
subDataSST.meanrt = cell2mat(rawNumericColumns(:, 71));
subDataSST.moneyamt = cell2mat(rawNumericColumns(:, 72));
subDataSST.percentacc = cell2mat(rawNumericColumns(:, 73));
subDataSST.prbacc = cell2mat(rawNumericColumns(:, 74));
subDataSST.prbresp = rawCellColumns(:, 20);
subDataSST.prbrt = cell2mat(rawNumericColumns(:, 75));
subDataSST.Probe = rawCellColumns(:, 21);
subDataSST.ProbeDuration = cell2mat(rawNumericColumns(:, 76));
subDataSST.ProbeDurationError = cell2mat(rawNumericColumns(:, 77));
subDataSST.ProbeFinishTime = cell2mat(rawNumericColumns(:, 78));
subDataSST.ProbeOffsetDelay = cell2mat(rawNumericColumns(:, 79));
subDataSST.ProbeOffsetTime = cell2mat(rawNumericColumns(:, 80));
subDataSST.ProbeOnsetDelay = cell2mat(rawNumericColumns(:, 81));
subDataSST.ProbeOnsetTime = cell2mat(rawNumericColumns(:, 82));
subDataSST.ProbeOnsetToOnsetTime = cell2mat(rawNumericColumns(:, 83));
subDataSST.ProbeRESP = cell2mat(rawNumericColumns(:, 84));
subDataSST.ProbeRT = cell2mat(rawNumericColumns(:, 85));
subDataSST.ProbeRTTime = cell2mat(rawNumericColumns(:, 86));
subDataSST.ProbeStartTime = cell2mat(rawNumericColumns(:, 87));
subDataSST.ProbeTime = cell2mat(rawNumericColumns(:, 88));
subDataSST.ProcedureSubTrial = cell2mat(rawNumericColumns(:, 89));
subDataSST.ResponseCheck = cell2mat(rawNumericColumns(:, 90));
subDataSST.Result = cell2mat(rawNumericColumns(:, 91));
subDataSST.RunList = cell2mat(rawNumericColumns(:, 92));
subDataSST.RunListCycle = cell2mat(rawNumericColumns(:, 93));
subDataSST.RunListSample = cell2mat(rawNumericColumns(:, 94));
subDataSST.RunMoney = cell2mat(rawNumericColumns(:, 95));
subDataSST.RunningSubTrial = cell2mat(rawNumericColumns(:, 96));
subDataSST.TextDisplay1Duration = cell2mat(rawNumericColumns(:, 97));
subDataSST.TextDisplay1DurationError = cell2mat(rawNumericColumns(:, 98));
subDataSST.TextDisplay1FinishTime = cell2mat(rawNumericColumns(:, 99));
subDataSST.TextDisplay1OffsetDelay = cell2mat(rawNumericColumns(:, 100));
subDataSST.TextDisplay1OffsetTime = cell2mat(rawNumericColumns(:, 101));
subDataSST.TextDisplay1OnsetDelay = cell2mat(rawNumericColumns(:, 102));
subDataSST.TextDisplay1OnsetTime = cell2mat(rawNumericColumns(:, 103));
subDataSST.TextDisplay1OnsetToOnsetTime = cell2mat(rawNumericColumns(:, 104));
subDataSST.TextDisplay1StartTime = cell2mat(rawNumericColumns(:, 105));
subDataSST.TimeVersion14 = cell2mat(rawNumericColumns(:, 106));
subDataSST.TimeVersion9 = cell2mat(rawNumericColumns(:, 107));

% For code requiring serial dates (datenum) instead of datetime, uncomment
% the following line(s) below to return the imported dates as datenum(s).

% NDARINV81W1WMVMMID.SessionTime=datenum(NDARINV81W1WMVMMID.SessionTime);

