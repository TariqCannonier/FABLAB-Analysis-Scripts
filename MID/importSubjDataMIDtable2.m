function NDARINV49YTZ5Z4MID = importSubjDataMIDtable2(filename, startRow, endRow)
%IMPORTFILE Import numeric data from a text file as a matrix.
%   NDARINV49YTZ5Z4MID = IMPORTFILE(FILENAME) Reads data from text file
%   FILENAME for the default selection.
%
%   NDARINV49YTZ5Z4MID = IMPORTFILE(FILENAME, STARTROW, ENDROW) Reads data
%   from rows STARTROW through ENDROW of text file FILENAME.
%
% Example:
%   NDARINV49YTZ5Z4MID = importfile('NDAR_INV49YTZ5Z4_MID.txt', 2, 106);
%
%    See also TEXTSCAN.

% Auto-generated by MATLAB on 2017/03/16 02:21:15

%% Initialize variables.
delimiter = {'\t',','};
if nargin<=2
    startRow = 2;
    endRow = inf;
end

%% Read columns of data as text:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to the format.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', delimiter, 'TextType', 'string', 'HeaderLines', startRow(1)-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
for block=2:length(startRow)
    frewind(fileID);
    dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', delimiter, 'TextType', 'string', 'HeaderLines', startRow(block)-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
    for col=1:length(dataArray)
        dataArray{col} = [dataArray{col};dataArrayBlock{col}];
    end
end

%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric text to numbers.
% Replace non-numeric text with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = mat2cell(dataArray{col}, ones(length(dataArray{col}), 1));
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

for col=[1,2,3,4,7,9,12,13,21,23,24,25,26,27,28,29,30,31,32,33,34,35,36,39,40,41,42,43,44,45,46,47,48,49,50,51,52,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,104,105,106,107,108,109,110,111,112,113,114,115,116,120,121,122,123,125,126,127,128,129,130,131,132,133,134,135]
    % Converts text in the input cell array to numbers. Replaced non-numeric
    % text with NaN.
    rawData = dataArray{col};
    for row=1:size(rawData, 1)
        % Create a regular expression to detect and remove non-numeric prefixes and
        % suffixes.
        regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
        try
            result = regexp(rawData(row), regexstr, 'names');
            numbers = result.numbers;
            
            % Detected commas in non-thousand locations.
            invalidThousandsSeparator = false;
            if numbers.contains(',')
                thousandsRegExp = '^\d+?(\,\d{3})*\.{0,1}\d*$';
                if isempty(regexp(numbers, thousandsRegExp, 'once'))
                    numbers = NaN;
                    invalidThousandsSeparator = true;
                end
            end
            % Convert numeric text to numbers.
            if ~invalidThousandsSeparator
                numbers = textscan(char(strrep(numbers, ',', '')), '%f');
                numericData(row, col) = numbers{1};
                raw{row, col} = numbers{1};
            end
        catch
            raw{row, col} = rawData{row};
        end
    end
end

% Convert the contents of columns with dates to MATLAB datetimes using the
% specified date format.
try
    dates{19} = datetime(dataArray{19}, 'Format', 'HH:mm:ss', 'InputFormat', 'HH:mm:ss');
catch
    try
        % Handle dates surrounded by quotes
        dataArray{19} = cellfun(@(x) x(2:end-1), dataArray{19}, 'UniformOutput', false);
        dates{19} = datetime(dataArray{19}, 'Format', 'HH:mm:ss', 'InputFormat', 'HH:mm:ss');
    catch
        dates{19} = repmat(datetime([NaN NaN NaN]), size(dataArray{19}));
    end
end

dates = dates(:,19);

%% Split data into numeric and string columns.
rawNumericColumns = raw(:, [1,2,3,4,7,9,12,13,21,23,24,25,26,27,28,29,30,31,32,33,34,35,36,39,40,41,42,43,44,45,46,47,48,49,50,51,52,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,104,105,106,107,108,109,110,111,112,113,114,115,116,120,121,122,123,125,126,127,128,129,130,131,132,133,134,135]);
rawStringColumns = string(raw(:, [5,6,8,10,11,14,15,16,17,18,20,22,37,38,53,54,75,76,103,117,118,119,124]));


%% Replace non-numeric cells with NaN
R = cellfun(@(x) ~isnumeric(x) && ~islogical(x),rawNumericColumns); % Find non-numeric cells
rawNumericColumns(R) = {NaN}; % Replace non-numeric cells

%% Make sure any text containing <undefined> is properly converted to an <undefined> categorical
for catIdx = [1,2,3,4,5,6,7,8,9,11,12,13,14,15,16,17,18,19,20,21,22,23]
    idx = (rawStringColumns(:, catIdx) == "<undefined>");
    rawStringColumns(idx, catIdx) = "";
end

%% Create output variable
NDARINV49YTZ5Z4MID = table;
NDARINV49YTZ5Z4MID.ExperimentName = cell2mat(rawNumericColumns(:, 1));
NDARINV49YTZ5Z4MID.Subject = cell2mat(rawNumericColumns(:, 2));
NDARINV49YTZ5Z4MID.Session = cell2mat(rawNumericColumns(:, 3));
NDARINV49YTZ5Z4MID.Allowed = cell2mat(rawNumericColumns(:, 4));
NDARINV49YTZ5Z4MID.ClockInformation = categorical(rawStringColumns(:, 1));
NDARINV49YTZ5Z4MID.DataFileBasename = categorical(rawStringColumns(:, 2));
NDARINV49YTZ5Z4MID.DisplayRefreshRate = cell2mat(rawNumericColumns(:, 5));
NDARINV49YTZ5Z4MID.ExperimentVersion = categorical(rawStringColumns(:, 3));
NDARINV49YTZ5Z4MID.Group = cell2mat(rawNumericColumns(:, 6));
NDARINV49YTZ5Z4MID.Handedness = categorical(rawStringColumns(:, 4));
NDARINV49YTZ5Z4MID.NARGUID = categorical(rawStringColumns(:, 5));
NDARINV49YTZ5Z4MID.PracticeRT = cell2mat(rawNumericColumns(:, 7));
NDARINV49YTZ5Z4MID.RandomSeed = cell2mat(rawNumericColumns(:, 8));
NDARINV49YTZ5Z4MID.RuntimeCapabilities = categorical(rawStringColumns(:, 6));
NDARINV49YTZ5Z4MID.RuntimeVersion = categorical(rawStringColumns(:, 7));
NDARINV49YTZ5Z4MID.RuntimeVersionExpected = categorical(rawStringColumns(:, 8));
NDARINV49YTZ5Z4MID.SessionDate = categorical(rawStringColumns(:, 9));
NDARINV49YTZ5Z4MID.SessionStartDateTimeUtc = rawStringColumns(:, 10);
NDARINV49YTZ5Z4MID.SessionTime = dates{:, 1};
NDARINV49YTZ5Z4MID.StudioVersion = categorical(rawStringColumns(:, 11));
NDARINV49YTZ5Z4MID.TrialOrder = cell2mat(rawNumericColumns(:, 9));
NDARINV49YTZ5Z4MID.triggercode = categorical(rawStringColumns(:, 12));
NDARINV49YTZ5Z4MID.Block = cell2mat(rawNumericColumns(:, 10));
NDARINV49YTZ5Z4MID.BlockList = cell2mat(rawNumericColumns(:, 11));
NDARINV49YTZ5Z4MID.BlockListCycle = cell2mat(rawNumericColumns(:, 12));
NDARINV49YTZ5Z4MID.BlockListSample = cell2mat(rawNumericColumns(:, 13));
NDARINV49YTZ5Z4MID.BlockTitle = cell2mat(rawNumericColumns(:, 14));
NDARINV49YTZ5Z4MID.EndFixDuration = cell2mat(rawNumericColumns(:, 15));
NDARINV49YTZ5Z4MID.EndFixDurationError = cell2mat(rawNumericColumns(:, 16));
NDARINV49YTZ5Z4MID.EndFixFinishTime = cell2mat(rawNumericColumns(:, 17));
NDARINV49YTZ5Z4MID.EndFixOffsetDelay = cell2mat(rawNumericColumns(:, 18));
NDARINV49YTZ5Z4MID.EndFixOffsetTime = cell2mat(rawNumericColumns(:, 19));
NDARINV49YTZ5Z4MID.EndFixOnsetDelay = cell2mat(rawNumericColumns(:, 20));
NDARINV49YTZ5Z4MID.EndFixOnsetTime = cell2mat(rawNumericColumns(:, 21));
NDARINV49YTZ5Z4MID.EndFixOnsetToOnsetTime = cell2mat(rawNumericColumns(:, 22));
NDARINV49YTZ5Z4MID.EndFixStartTime = cell2mat(rawNumericColumns(:, 23));
NDARINV49YTZ5Z4MID.ProcedureBlock = categorical(rawStringColumns(:, 13));
NDARINV49YTZ5Z4MID.RunningBlock = categorical(rawStringColumns(:, 14));
NDARINV49YTZ5Z4MID.Trial = cell2mat(rawNumericColumns(:, 24));
NDARINV49YTZ5Z4MID.GetReadyRTTime = cell2mat(rawNumericColumns(:, 25));
NDARINV49YTZ5Z4MID.PeriodList = cell2mat(rawNumericColumns(:, 26));
NDARINV49YTZ5Z4MID.PeriodListCycle = cell2mat(rawNumericColumns(:, 27));
NDARINV49YTZ5Z4MID.PeriodListSample = cell2mat(rawNumericColumns(:, 28));
NDARINV49YTZ5Z4MID.PrepTimeDuration = cell2mat(rawNumericColumns(:, 29));
NDARINV49YTZ5Z4MID.PrepTimeDurationError = cell2mat(rawNumericColumns(:, 30));
NDARINV49YTZ5Z4MID.PrepTimeFinishTime = cell2mat(rawNumericColumns(:, 31));
NDARINV49YTZ5Z4MID.PrepTimeOffsetDelay = cell2mat(rawNumericColumns(:, 32));
NDARINV49YTZ5Z4MID.PrepTimeOffsetTime = cell2mat(rawNumericColumns(:, 33));
NDARINV49YTZ5Z4MID.PrepTimeOnsetDelay = cell2mat(rawNumericColumns(:, 34));
NDARINV49YTZ5Z4MID.PrepTimeOnsetTime = cell2mat(rawNumericColumns(:, 35));
NDARINV49YTZ5Z4MID.PrepTimeOnsetToOnsetTime = cell2mat(rawNumericColumns(:, 36));
NDARINV49YTZ5Z4MID.PrepTimeStartTime = cell2mat(rawNumericColumns(:, 37));
NDARINV49YTZ5Z4MID.ProcedureTrial = categorical(rawStringColumns(:, 15));
NDARINV49YTZ5Z4MID.RunningTrial = categorical(rawStringColumns(:, 16));
NDARINV49YTZ5Z4MID.SiemensPadOffsetDelay = cell2mat(rawNumericColumns(:, 38));
NDARINV49YTZ5Z4MID.SiemensPadOffsetTime = cell2mat(rawNumericColumns(:, 39));
NDARINV49YTZ5Z4MID.SiemensPadOnsetDelay = cell2mat(rawNumericColumns(:, 40));
NDARINV49YTZ5Z4MID.SiemensPadOnsetTime = cell2mat(rawNumericColumns(:, 41));
NDARINV49YTZ5Z4MID.SiemensPadOnsetToOnsetTime = cell2mat(rawNumericColumns(:, 42));
NDARINV49YTZ5Z4MID.SiemensPadRTTime = cell2mat(rawNumericColumns(:, 43));
NDARINV49YTZ5Z4MID.Waiting4Scanner = cell2mat(rawNumericColumns(:, 44));
NDARINV49YTZ5Z4MID.Waiting4ScannerCycle = cell2mat(rawNumericColumns(:, 45));
NDARINV49YTZ5Z4MID.Waiting4ScannerSample = cell2mat(rawNumericColumns(:, 46));
NDARINV49YTZ5Z4MID.SubTrial = cell2mat(rawNumericColumns(:, 47));
NDARINV49YTZ5Z4MID.AnticipationDuration = cell2mat(rawNumericColumns(:, 48));
NDARINV49YTZ5Z4MID.AnticipationDurationError = cell2mat(rawNumericColumns(:, 49));
NDARINV49YTZ5Z4MID.AnticipationFinishTime = cell2mat(rawNumericColumns(:, 50));
NDARINV49YTZ5Z4MID.AnticipationOffsetDelay = cell2mat(rawNumericColumns(:, 51));
NDARINV49YTZ5Z4MID.AnticipationOffsetTime = cell2mat(rawNumericColumns(:, 52));
NDARINV49YTZ5Z4MID.AnticipationOnsetDelay = cell2mat(rawNumericColumns(:, 53));
NDARINV49YTZ5Z4MID.AnticipationOnsetTime = cell2mat(rawNumericColumns(:, 54));
NDARINV49YTZ5Z4MID.AnticipationOnsetToOnsetTime = cell2mat(rawNumericColumns(:, 55));
NDARINV49YTZ5Z4MID.AnticipationStartTime = cell2mat(rawNumericColumns(:, 56));
NDARINV49YTZ5Z4MID.AnticipationDuration1 = cell2mat(rawNumericColumns(:, 57));
NDARINV49YTZ5Z4MID.Condition = categorical(rawStringColumns(:, 17));
NDARINV49YTZ5Z4MID.Cue = categorical(rawStringColumns(:, 18));
NDARINV49YTZ5Z4MID.CueCustomOnsetTime = cell2mat(rawNumericColumns(:, 58));
NDARINV49YTZ5Z4MID.CueDuration = cell2mat(rawNumericColumns(:, 59));
NDARINV49YTZ5Z4MID.CueDurationError = cell2mat(rawNumericColumns(:, 60));
NDARINV49YTZ5Z4MID.CueFinishTime = cell2mat(rawNumericColumns(:, 61));
NDARINV49YTZ5Z4MID.CueOffsetDelay = cell2mat(rawNumericColumns(:, 62));
NDARINV49YTZ5Z4MID.CueOffsetTime = cell2mat(rawNumericColumns(:, 63));
NDARINV49YTZ5Z4MID.CueOnsetDelay = cell2mat(rawNumericColumns(:, 64));
NDARINV49YTZ5Z4MID.CueOnsetTime = cell2mat(rawNumericColumns(:, 65));
NDARINV49YTZ5Z4MID.CueOnsetToOnsetTime = cell2mat(rawNumericColumns(:, 66));
NDARINV49YTZ5Z4MID.CueStartTime = cell2mat(rawNumericColumns(:, 67));
NDARINV49YTZ5Z4MID.FeedbackDuration = cell2mat(rawNumericColumns(:, 68));
NDARINV49YTZ5Z4MID.FeedbackDurationError = cell2mat(rawNumericColumns(:, 69));
NDARINV49YTZ5Z4MID.FeedbackFinishTime = cell2mat(rawNumericColumns(:, 70));
NDARINV49YTZ5Z4MID.FeedbackOffsetDelay = cell2mat(rawNumericColumns(:, 71));
NDARINV49YTZ5Z4MID.FeedbackOffsetTime = cell2mat(rawNumericColumns(:, 72));
NDARINV49YTZ5Z4MID.FeedbackOnsetDelay = cell2mat(rawNumericColumns(:, 73));
NDARINV49YTZ5Z4MID.FeedbackOnsetTime = cell2mat(rawNumericColumns(:, 74));
NDARINV49YTZ5Z4MID.FeedbackOnsetToOnsetTime = cell2mat(rawNumericColumns(:, 75));
NDARINV49YTZ5Z4MID.FeedbackStartTime = cell2mat(rawNumericColumns(:, 76));
NDARINV49YTZ5Z4MID.FeedbackDuration1 = cell2mat(rawNumericColumns(:, 77));
NDARINV49YTZ5Z4MID.meanrt = cell2mat(rawNumericColumns(:, 78));
NDARINV49YTZ5Z4MID.moneyamt = cell2mat(rawNumericColumns(:, 79));
NDARINV49YTZ5Z4MID.percentacc = cell2mat(rawNumericColumns(:, 80));
NDARINV49YTZ5Z4MID.prbacc = cell2mat(rawNumericColumns(:, 81));
NDARINV49YTZ5Z4MID.prbresp = cell2mat(rawNumericColumns(:, 82));
NDARINV49YTZ5Z4MID.prbrt = cell2mat(rawNumericColumns(:, 83));
NDARINV49YTZ5Z4MID.Probe = categorical(rawStringColumns(:, 19));
NDARINV49YTZ5Z4MID.ProbeDuration = cell2mat(rawNumericColumns(:, 84));
NDARINV49YTZ5Z4MID.ProbeDurationError = cell2mat(rawNumericColumns(:, 85));
NDARINV49YTZ5Z4MID.ProbeFinishTime = cell2mat(rawNumericColumns(:, 86));
NDARINV49YTZ5Z4MID.ProbeOffsetDelay = cell2mat(rawNumericColumns(:, 87));
NDARINV49YTZ5Z4MID.ProbeOffsetTime = cell2mat(rawNumericColumns(:, 88));
NDARINV49YTZ5Z4MID.ProbeOnsetDelay = cell2mat(rawNumericColumns(:, 89));
NDARINV49YTZ5Z4MID.ProbeOnsetTime = cell2mat(rawNumericColumns(:, 90));
NDARINV49YTZ5Z4MID.ProbeOnsetToOnsetTime = cell2mat(rawNumericColumns(:, 91));
NDARINV49YTZ5Z4MID.ProbeRESP = cell2mat(rawNumericColumns(:, 92));
NDARINV49YTZ5Z4MID.ProbeRT = cell2mat(rawNumericColumns(:, 93));
NDARINV49YTZ5Z4MID.ProbeRTTime = cell2mat(rawNumericColumns(:, 94));
NDARINV49YTZ5Z4MID.ProbeStartTime = cell2mat(rawNumericColumns(:, 95));
NDARINV49YTZ5Z4MID.ProbeTime = cell2mat(rawNumericColumns(:, 96));
NDARINV49YTZ5Z4MID.ProcedureSubTrial = categorical(rawStringColumns(:, 20));
NDARINV49YTZ5Z4MID.ResponseCheck = categorical(rawStringColumns(:, 21));
NDARINV49YTZ5Z4MID.Result = categorical(rawStringColumns(:, 22));
NDARINV49YTZ5Z4MID.RunList = cell2mat(rawNumericColumns(:, 97));
NDARINV49YTZ5Z4MID.RunListCycle = cell2mat(rawNumericColumns(:, 98));
NDARINV49YTZ5Z4MID.RunListSample = cell2mat(rawNumericColumns(:, 99));
NDARINV49YTZ5Z4MID.RunMoney = cell2mat(rawNumericColumns(:, 100));
NDARINV49YTZ5Z4MID.RunningSubTrial = categorical(rawStringColumns(:, 23));
NDARINV49YTZ5Z4MID.TextDisplay1Duration = cell2mat(rawNumericColumns(:, 101));
NDARINV49YTZ5Z4MID.TextDisplay1DurationError = cell2mat(rawNumericColumns(:, 102));
NDARINV49YTZ5Z4MID.TextDisplay1FinishTime = cell2mat(rawNumericColumns(:, 103));
NDARINV49YTZ5Z4MID.TextDisplay1OffsetDelay = cell2mat(rawNumericColumns(:, 104));
NDARINV49YTZ5Z4MID.TextDisplay1OffsetTime = cell2mat(rawNumericColumns(:, 105));
NDARINV49YTZ5Z4MID.TextDisplay1OnsetDelay = cell2mat(rawNumericColumns(:, 106));
NDARINV49YTZ5Z4MID.TextDisplay1OnsetTime = cell2mat(rawNumericColumns(:, 107));
NDARINV49YTZ5Z4MID.TextDisplay1OnsetToOnsetTime = cell2mat(rawNumericColumns(:, 108));
NDARINV49YTZ5Z4MID.TextDisplay1StartTime = cell2mat(rawNumericColumns(:, 109));
NDARINV49YTZ5Z4MID.TimeVersion1 = cell2mat(rawNumericColumns(:, 110));
NDARINV49YTZ5Z4MID.TimeVersion13 = cell2mat(rawNumericColumns(:, 111));

% For code requiring serial dates (datenum) instead of datetime, uncomment
% the following line(s) below to return the imported dates as datenum(s).

% NDARINV49YTZ5Z4MID.SessionTime=datenum(NDARINV49YTZ5Z4MID.SessionTime);

