function MID = importMID(filename, startRow, endRow)
%IMPORTFILE Import numeric data from a text file as a matrix.
%   MIDBEHAVIOR20170317 = IMPORTFILE(FILENAME) Reads data from text file
%   FILENAME for the default selection.
%
%   MIDBEHAVIOR20170317 = IMPORTFILE(FILENAME, STARTROW, ENDROW) Reads data
%   from rows STARTROW through ENDROW of text file FILENAME.
%
% Example:
%   MIDBehavior20170317 = importfile('MIDBehavior_20170317.csv', 2, 995);
%
%    See also TEXTSCAN.

% Auto-generated by MATLAB on 2017/03/18 10:47:40

%% Initialize variables.
delimiter = ',';
if nargin<=2
    startRow = 2;
    endRow = inf;
end

%% Read columns of data as text:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to the format.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', delimiter, 'HeaderLines', startRow(1)-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
for block=2:length(startRow)
    frewind(fileID);
    dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', delimiter, 'HeaderLines', startRow(block)-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
    for col=1:length(dataArray)
        dataArray{col} = [dataArray{col};dataArrayBlock{col}];
    end
end

%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric text to numbers.
% Replace non-numeric text with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = dataArray{col};
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

for col=[3,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91]
    % Converts text in the input cell array to numbers. Replaced non-numeric
    % text with NaN.
    rawData = dataArray{col};
    for row=1:size(rawData, 1);
        % Create a regular expression to detect and remove non-numeric prefixes and
        % suffixes.
        regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
        try
            result = regexp(rawData{row}, regexstr, 'names');
            numbers = result.numbers;
            
            % Detected commas in non-thousand locations.
            invalidThousandsSeparator = false;
            if any(numbers==',');
                thousandsRegExp = '^\d+?(\,\d{3})*\.{0,1}\d*$';
                if isempty(regexp(numbers, thousandsRegExp, 'once'));
                    numbers = NaN;
                    invalidThousandsSeparator = true;
                end
            end
            % Convert numeric text to numbers.
            if ~invalidThousandsSeparator;
                numbers = textscan(strrep(numbers, ',', ''), '%f');
                numericData(row, col) = numbers{1};
                raw{row, col} = numbers{1};
            end
        catch me
        end
    end
end


%% Split data into numeric and cell columns.
rawNumericColumns = raw(:, [3,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91]);
rawCellColumns = raw(:, [1,2,4]);


%% Replace non-numeric cells with NaN
R = cellfun(@(x) ~isnumeric(x) && ~islogical(x),rawNumericColumns); % Find non-numeric cells
rawNumericColumns(R) = {NaN}; % Replace non-numeric cells

%% Create output variable
MID = table;
MID.Site = rawCellColumns(:, 1);
MID.Subject = rawCellColumns(:, 2);
MID.ExperimentName = cell2mat(rawNumericColumns(:, 1));
MID.Version = rawCellColumns(:, 3);
MID.OverallMoney = cell2mat(rawNumericColumns(:, 2));
MID.OverallCombinedRewardHitRate = cell2mat(rawNumericColumns(:, 3));
MID.OverallCombinedRewardMissRate = cell2mat(rawNumericColumns(:, 4));
MID.OverallCombinedRewardMeanRT = cell2mat(rawNumericColumns(:, 5));
MID.OverallCombinedRewardRT_Std = cell2mat(rawNumericColumns(:, 6));
MID.OverallCombinedLossHitRate = cell2mat(rawNumericColumns(:, 7));
MID.OverallCombinedLossMissRate = cell2mat(rawNumericColumns(:, 8));
MID.OverallCombinedLossMeanRT = cell2mat(rawNumericColumns(:, 9));
MID.OverallCombinedLossRT_Std = cell2mat(rawNumericColumns(:, 10));
MID.OverallSmallRewardHitRate = cell2mat(rawNumericColumns(:, 11));
MID.OverallSmallRewardMissRate = cell2mat(rawNumericColumns(:, 12));
MID.OverallSmallRewardMeanRT = cell2mat(rawNumericColumns(:, 13));
MID.OverallSmallRewardRT_Std = cell2mat(rawNumericColumns(:, 14));
MID.OverallLargeRewardHitRate = cell2mat(rawNumericColumns(:, 15));
MID.OverallLargeRewardMissRate = cell2mat(rawNumericColumns(:, 16));
MID.OverallLargeRewardMeanRT = cell2mat(rawNumericColumns(:, 17));
MID.OverallLargeRewardRT_Std = cell2mat(rawNumericColumns(:, 18));
MID.OverallSmallLossHitRate = cell2mat(rawNumericColumns(:, 19));
MID.OverallSmallLossMissRate = cell2mat(rawNumericColumns(:, 20));
MID.OverallSmallLossMeanRT = cell2mat(rawNumericColumns(:, 21));
MID.OverallSmallLossRT_Std = cell2mat(rawNumericColumns(:, 22));
MID.OverallLargeLossHitRate = cell2mat(rawNumericColumns(:, 23));
MID.OverallLargeLossMissRate = cell2mat(rawNumericColumns(:, 24));
MID.OverallLargeLossMeanRT = cell2mat(rawNumericColumns(:, 25));
MID.OverallLargeLossRT_Std = cell2mat(rawNumericColumns(:, 26));
MID.OverallNeutralHitRate = cell2mat(rawNumericColumns(:, 27));
MID.OverallNeutralMissRate = cell2mat(rawNumericColumns(:, 28));
MID.OverallNeutralMeanRT = cell2mat(rawNumericColumns(:, 29));
MID.OverallNeutralRT_Std = cell2mat(rawNumericColumns(:, 30));
MID.run1Money = cell2mat(rawNumericColumns(:, 31));
MID.run1CombinedRewardHitRate = cell2mat(rawNumericColumns(:, 32));
MID.run1CombinedRewardMissRate = cell2mat(rawNumericColumns(:, 33));
MID.run1CombinedRewardMeanRT = cell2mat(rawNumericColumns(:, 34));
MID.run1CombinedRewardRT_Std = cell2mat(rawNumericColumns(:, 35));
MID.run1CombinedLossHitRate = cell2mat(rawNumericColumns(:, 36));
MID.run1CombinedLossMissRate = cell2mat(rawNumericColumns(:, 37));
MID.run1CombinedLossMeanRT = cell2mat(rawNumericColumns(:, 38));
MID.run1CombinedLossRT_Std = cell2mat(rawNumericColumns(:, 39));
MID.run1SmallRewardHitRate = cell2mat(rawNumericColumns(:, 40));
MID.run1SmallRewardMissRate = cell2mat(rawNumericColumns(:, 41));
MID.run1SmallRewardMeanRT = cell2mat(rawNumericColumns(:, 42));
MID.run1SmallRewardRT_Std = cell2mat(rawNumericColumns(:, 43));
MID.run1LargeRewardHitRate = cell2mat(rawNumericColumns(:, 44));
MID.run1LargeRewardMissRate = cell2mat(rawNumericColumns(:, 45));
MID.run1LargeRewardMeanRT = cell2mat(rawNumericColumns(:, 46));
MID.run1LargeRewardRT_Std = cell2mat(rawNumericColumns(:, 47));
MID.run1SmallLossHitRate = cell2mat(rawNumericColumns(:, 48));
MID.run1SmallLossMissRate = cell2mat(rawNumericColumns(:, 49));
MID.run1SmallLossMeanRT = cell2mat(rawNumericColumns(:, 50));
MID.run1SmallLossRT_Std = cell2mat(rawNumericColumns(:, 51));
MID.run1LargeLossHitRate = cell2mat(rawNumericColumns(:, 52));
MID.run1LargeLossMissRate = cell2mat(rawNumericColumns(:, 53));
MID.run1LargeLossMeanRT = cell2mat(rawNumericColumns(:, 54));
MID.run1LargeLossRT_Std = cell2mat(rawNumericColumns(:, 55));
MID.run1NeutralHitRate = cell2mat(rawNumericColumns(:, 56));
MID.run1NeutralMissRate = cell2mat(rawNumericColumns(:, 57));
MID.run1NeutralMeanRT = cell2mat(rawNumericColumns(:, 58));
MID.run1NeutralRT_Std = cell2mat(rawNumericColumns(:, 59));
MID.run2Money = cell2mat(rawNumericColumns(:, 60));
MID.run2CombinedRewardHitRate = cell2mat(rawNumericColumns(:, 61));
MID.run2CombinedRewardMissRate = cell2mat(rawNumericColumns(:, 62));
MID.run2CombinedRewardMeanRT = cell2mat(rawNumericColumns(:, 63));
MID.run2CombinedRewardRT_Std = cell2mat(rawNumericColumns(:, 64));
MID.run2CombinedLossHitRate = cell2mat(rawNumericColumns(:, 65));
MID.run2CombinedLossMissRate = cell2mat(rawNumericColumns(:, 66));
MID.run2CombinedLossMeanRT = cell2mat(rawNumericColumns(:, 67));
MID.run2CombinedLossRT_Std = cell2mat(rawNumericColumns(:, 68));
MID.run2SmallRewardHitRate = cell2mat(rawNumericColumns(:, 69));
MID.run2SmallRewardMissRate = cell2mat(rawNumericColumns(:, 70));
MID.run2SmallRewardMeanRT = cell2mat(rawNumericColumns(:, 71));
MID.run2SmallRewardRT_Std = cell2mat(rawNumericColumns(:, 72));
MID.run2LargeRewardHitRate = cell2mat(rawNumericColumns(:, 73));
MID.run2LargeRewardMissRate = cell2mat(rawNumericColumns(:, 74));
MID.run2LargeRewardMeanRT = cell2mat(rawNumericColumns(:, 75));
MID.run2LargeRewardRT_Std = cell2mat(rawNumericColumns(:, 76));
MID.run2SmallLossHitRate = cell2mat(rawNumericColumns(:, 77));
MID.run2SmallLossMissRate = cell2mat(rawNumericColumns(:, 78));
MID.run2SmallLossMeanRT = cell2mat(rawNumericColumns(:, 79));
MID.run2SmallLossRT_Std = cell2mat(rawNumericColumns(:, 80));
MID.run2LargeLossHitRate = cell2mat(rawNumericColumns(:, 81));
MID.run2LargeLossMissRate = cell2mat(rawNumericColumns(:, 82));
MID.run2LargeLossMeanRT = cell2mat(rawNumericColumns(:, 83));
MID.run2LargeLossRT_Std = cell2mat(rawNumericColumns(:, 84));
MID.run2NeutralHitRate = cell2mat(rawNumericColumns(:, 85));
MID.run2NeutralMissRate = cell2mat(rawNumericColumns(:, 86));
MID.run2NeutralMeanRT = cell2mat(rawNumericColumns(:, 87));
MID.run2NeutralRT_Std = cell2mat(rawNumericColumns(:, 88));

