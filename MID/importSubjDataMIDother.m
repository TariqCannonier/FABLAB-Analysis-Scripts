function MID = importSubjDataMIDother(filename, startRow, endRow)
%IMPORTFILE Import numeric data from a text file as a matrix.
%   NDARINVHMNN9G5JMID = IMPORTFILE(FILENAME) Reads data from text file
%   FILENAME for the default selection.
%
%   NDARINVHMNN9G5JMID = IMPORTFILE(FILENAME, STARTROW, ENDROW) Reads data
%   from rows STARTROW through ENDROW of text file FILENAME.
%
% Example:
%   NDARINVHMNN9G5JMID = importfile('NDAR_INVHMNN9G5J_MID.csv', 3, 106);
%
%    See also TEXTSCAN.

% Auto-generated by MATLAB on 2017/05/18 12:56:48

%% Initialize variables.
delimiter = {',','\t'};
if nargin<=2
    startRow = 3;
    endRow = inf;
end

%% Read columns of data as text:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to the format.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', delimiter, 'HeaderLines', startRow(1)-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
for block=2:length(startRow)
    frewind(fileID);
    dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', delimiter, 'HeaderLines', startRow(block)-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
    for col=1:length(dataArray)
        dataArray{col} = [dataArray{col};dataArrayBlock{col}];
    end
end

%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric text to numbers.
% Replace non-numeric text with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = dataArray{col};
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

for col=[1,2,3,5,6,11,12,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,33,34,35,36,37,38,39,40,41,42,43,44,45,46,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129]
    % Converts text in the input cell array to numbers. Replaced non-numeric
    % text with NaN.
    rawData = dataArray{col};
    for row=1:size(rawData, 1);
        % Create a regular expression to detect and remove non-numeric prefixes and
        % suffixes.
        regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
        try
            result = regexp(rawData{row}, regexstr, 'names');
            numbers = result.numbers;
            
            % Detected commas in non-thousand locations.
            invalidThousandsSeparator = false;
            if any(numbers==',');
                thousandsRegExp = '^\d+?(\,\d{3})*\.{0,1}\d*$';
                if isempty(regexp(numbers, thousandsRegExp, 'once'));
                    numbers = NaN;
                    invalidThousandsSeparator = true;
                end
            end
            % Convert numeric text to numbers.
            if ~invalidThousandsSeparator;
                numbers = textscan(strrep(numbers, ',', ''), '%f');
                numericData(row, col) = numbers{1};
                raw{row, col} = numbers{1};
            end
        catch me
        end
    end
end

dateFormats = {'MM/dd/yyyy', 'MM/dd/yyyy HH:mm', 'HH:mm:ss'};
dateFormatIndex = 1;
blankDates = cell(1,size(raw,2));
anyBlankDates = false(size(raw,1),1);
invalidDates = cell(1,size(raw,2));
anyInvalidDates = false(size(raw,1),1);
for col=[13,14,15]% Convert the contents of columns with dates to MATLAB datetimes using the specified date format.
    try
        dates{col} = datetime(dataArray{col}, 'Format', dateFormats{col==[13,14,15]}, 'InputFormat', dateFormats{col==[13,14,15]}); %#ok<SAGROW>
    catch
        try
            % Handle dates surrounded by quotes
            dataArray{col} = cellfun(@(x) x(2:end-1), dataArray{col}, 'UniformOutput', false);
            dates{col} = datetime(dataArray{col}, 'Format', dateFormats{col==[13,14,15]}, 'InputFormat', dateFormats{col==[13,14,15]}); %%#ok<SAGROW>
        catch
            dates{col} = repmat(datetime([NaN NaN NaN]), size(dataArray{col})); %#ok<SAGROW>
        end
    end
    
    dateFormatIndex = dateFormatIndex + 1;
    blankDates{col} = cellfun(@isempty, dataArray{col});
    anyBlankDates = blankDates{col} | anyBlankDates;
    invalidDates{col} = isnan(dates{col}.Hour) - blankDates{col};
    anyInvalidDates = invalidDates{col} | anyInvalidDates;
end
dates = dates(:,[13,14,15]);
blankDates = blankDates(:,[13,14,15]);
invalidDates = invalidDates(:,[13,14,15]);

%% Split data into numeric and cell columns.
rawNumericColumns = raw(:, [1,2,3,5,6,11,12,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,33,34,35,36,37,38,39,40,41,42,43,44,45,46,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129]);
rawCellColumns = raw(:, [4,7,8,9,10,31,32,47,48,69,70,97]);


%% Replace non-numeric cells with NaN
R = cellfun(@(x) ~isnumeric(x) && ~islogical(x),rawNumericColumns); % Find non-numeric cells
rawNumericColumns(R) = {NaN}; % Replace non-numeric cells

%% Create output variable
MID = table;
MID.ExperimentName = cell2mat(rawNumericColumns(:, 1));
MID.Subject = cell2mat(rawNumericColumns(:, 2));
MID.Session = cell2mat(rawNumericColumns(:, 3));
MID.DataFileBasename = rawCellColumns(:, 1);
MID.DisplayRefreshRate = cell2mat(rawNumericColumns(:, 4));
MID.Group = cell2mat(rawNumericColumns(:, 5));
MID.Handedness = rawCellColumns(:, 2);
MID.ImgPath = rawCellColumns(:, 3);
MID.MIDVERSION = rawCellColumns(:, 4);
MID.NARGUID = rawCellColumns(:, 5);
MID.PracticeRT = cell2mat(rawNumericColumns(:, 6));
MID.RandomSeed = cell2mat(rawNumericColumns(:, 7));
MID.SessionDate = dates{:, 1};
MID.SessionStartDateTimeUtc = dates{:, 2};
MID.SessionTime = dates{:, 3};
MID.Block = cell2mat(rawNumericColumns(:, 8));
MID.BlockList = cell2mat(rawNumericColumns(:, 9));
MID.BlockListCycle = cell2mat(rawNumericColumns(:, 10));
MID.BlockListSample = cell2mat(rawNumericColumns(:, 11));
MID.BlockTitle = cell2mat(rawNumericColumns(:, 12));
MID.EndFixDuration = cell2mat(rawNumericColumns(:, 13));
MID.EndFixDurationError = cell2mat(rawNumericColumns(:, 14));
MID.EndFixFinishTime = cell2mat(rawNumericColumns(:, 15));
MID.EndFixOffsetDelay = cell2mat(rawNumericColumns(:, 16));
MID.EndFixOffsetTime = cell2mat(rawNumericColumns(:, 17));
MID.EndFixOnsetDelay = cell2mat(rawNumericColumns(:, 18));
MID.EndFixOnsetTime = cell2mat(rawNumericColumns(:, 19));
MID.EndFixOnsetToOnsetTime = cell2mat(rawNumericColumns(:, 20));
MID.EndFixStartTime = cell2mat(rawNumericColumns(:, 21));
MID.ListName = cell2mat(rawNumericColumns(:, 22));
MID.ProcedureBlock = rawCellColumns(:, 6);
MID.RunningBlock = rawCellColumns(:, 7);
MID.Trial = cell2mat(rawNumericColumns(:, 23));
MID.GetReadyRTTime = cell2mat(rawNumericColumns(:, 24));
MID.PeriodList = cell2mat(rawNumericColumns(:, 25));
MID.PeriodListCycle = cell2mat(rawNumericColumns(:, 26));
MID.PeriodListSample = cell2mat(rawNumericColumns(:, 27));
MID.PrepTimeDuration = cell2mat(rawNumericColumns(:, 28));
MID.PrepTimeDurationError = cell2mat(rawNumericColumns(:, 29));
MID.PrepTimeFinishTime = cell2mat(rawNumericColumns(:, 30));
MID.PrepTimeOffsetDelay = cell2mat(rawNumericColumns(:, 31));
MID.PrepTimeOffsetTime = cell2mat(rawNumericColumns(:, 32));
MID.PrepTimeOnsetDelay = cell2mat(rawNumericColumns(:, 33));
MID.PrepTimeOnsetTime = cell2mat(rawNumericColumns(:, 34));
MID.PrepTimeOnsetToOnsetTime = cell2mat(rawNumericColumns(:, 35));
MID.PrepTimeStartTime = cell2mat(rawNumericColumns(:, 36));
MID.ProcedureTrial = rawCellColumns(:, 8);
MID.RunningTrial = rawCellColumns(:, 9);
MID.SiemensPadOffsetDelay = cell2mat(rawNumericColumns(:, 37));
MID.SiemensPadOffsetTime = cell2mat(rawNumericColumns(:, 38));
MID.SiemensPadOnsetDelay = cell2mat(rawNumericColumns(:, 39));
MID.SiemensPadOnsetTime = cell2mat(rawNumericColumns(:, 40));
MID.SiemensPadOnsetToOnsetTime = cell2mat(rawNumericColumns(:, 41));
MID.SiemensPadRTTime = cell2mat(rawNumericColumns(:, 42));
MID.Waiting4Scanner = cell2mat(rawNumericColumns(:, 43));
MID.Waiting4ScannerCycle = cell2mat(rawNumericColumns(:, 44));
MID.Waiting4ScannerSample = cell2mat(rawNumericColumns(:, 45));
MID.SubTrial = cell2mat(rawNumericColumns(:, 46));
MID.AnticipationDuration = cell2mat(rawNumericColumns(:, 47));
MID.AnticipationDurationError = cell2mat(rawNumericColumns(:, 48));
MID.AnticipationFinishTime = cell2mat(rawNumericColumns(:, 49));
MID.AnticipationOffsetDelay = cell2mat(rawNumericColumns(:, 50));
MID.AnticipationOffsetTime = cell2mat(rawNumericColumns(:, 51));
MID.AnticipationOnsetDelay = cell2mat(rawNumericColumns(:, 52));
MID.AnticipationOnsetTime = cell2mat(rawNumericColumns(:, 53));
MID.AnticipationOnsetToOnsetTime = cell2mat(rawNumericColumns(:, 54));
MID.AnticipationStartTime = cell2mat(rawNumericColumns(:, 55));
MID.AnticipationDuration1 = cell2mat(rawNumericColumns(:, 56));
MID.Condition = rawCellColumns(:, 10);
MID.Cue = rawCellColumns(:, 11);
MID.CueCustomOnsetTime = cell2mat(rawNumericColumns(:, 57));
MID.CueDuration = cell2mat(rawNumericColumns(:, 58));
MID.CueDurationError = cell2mat(rawNumericColumns(:, 59));
MID.CueFinishTime = cell2mat(rawNumericColumns(:, 60));
MID.CueOffsetDelay = cell2mat(rawNumericColumns(:, 61));
MID.CueOffsetTime = cell2mat(rawNumericColumns(:, 62));
MID.CueOnsetDelay = cell2mat(rawNumericColumns(:, 63));
MID.CueOnsetTime = cell2mat(rawNumericColumns(:, 64));
MID.CueOnsetToOnsetTime = cell2mat(rawNumericColumns(:, 65));
MID.CueStartTime = cell2mat(rawNumericColumns(:, 66));
MID.FeedbackDuration = cell2mat(rawNumericColumns(:, 67));
MID.FeedbackDurationError = cell2mat(rawNumericColumns(:, 68));
MID.FeedbackFinishTime = cell2mat(rawNumericColumns(:, 69));
MID.FeedbackOffsetDelay = cell2mat(rawNumericColumns(:, 70));
MID.FeedbackOffsetTime = cell2mat(rawNumericColumns(:, 71));
MID.FeedbackOnsetDelay = cell2mat(rawNumericColumns(:, 72));
MID.FeedbackOnsetTime = cell2mat(rawNumericColumns(:, 73));
MID.FeedbackOnsetToOnsetTime = cell2mat(rawNumericColumns(:, 74));
MID.FeedbackStartTime = cell2mat(rawNumericColumns(:, 75));
MID.FeedbackDuration1 = cell2mat(rawNumericColumns(:, 76));
MID.meanrt = cell2mat(rawNumericColumns(:, 77));
MID.moneyamt = cell2mat(rawNumericColumns(:, 78));
MID.percentacc = cell2mat(rawNumericColumns(:, 79));
MID.prbacc = cell2mat(rawNumericColumns(:, 80));
MID.prbresp = cell2mat(rawNumericColumns(:, 81));
MID.prbrt = cell2mat(rawNumericColumns(:, 82));
MID.Probe = rawCellColumns(:, 12);
MID.ProbeDuration = cell2mat(rawNumericColumns(:, 83));
MID.ProbeDurationError = cell2mat(rawNumericColumns(:, 84));
MID.ProbeFinishTime = cell2mat(rawNumericColumns(:, 85));
MID.ProbeOffsetDelay = cell2mat(rawNumericColumns(:, 86));
MID.ProbeOffsetTime = cell2mat(rawNumericColumns(:, 87));
MID.ProbeOnsetDelay = cell2mat(rawNumericColumns(:, 88));
MID.ProbeOnsetTime = cell2mat(rawNumericColumns(:, 89));
MID.ProbeOnsetToOnsetTime = cell2mat(rawNumericColumns(:, 90));
MID.ProbeRESP = cell2mat(rawNumericColumns(:, 91));
MID.ProbeRT = cell2mat(rawNumericColumns(:, 92));
MID.ProbeRTTime = cell2mat(rawNumericColumns(:, 93));
MID.ProbeStartTime = cell2mat(rawNumericColumns(:, 94));
MID.ProbeTime = cell2mat(rawNumericColumns(:, 95));
MID.ProcedureSubTrial = cell2mat(rawNumericColumns(:, 96));
MID.ResponseCheck = cell2mat(rawNumericColumns(:, 97));
MID.Result = cell2mat(rawNumericColumns(:, 98));
MID.RunList = cell2mat(rawNumericColumns(:, 99));
MID.RunListCycle = cell2mat(rawNumericColumns(:, 100));
MID.RunListSample = cell2mat(rawNumericColumns(:, 101));
MID.RunMoney = cell2mat(rawNumericColumns(:, 102));
MID.RunningSubTrial = cell2mat(rawNumericColumns(:, 103));
MID.TextDisplay1Duration = cell2mat(rawNumericColumns(:, 104));
MID.TextDisplay1DurationError = cell2mat(rawNumericColumns(:, 105));
MID.TextDisplay1FinishTime = cell2mat(rawNumericColumns(:, 106));
MID.TextDisplay1OffsetDelay = cell2mat(rawNumericColumns(:, 107));
MID.TextDisplay1OffsetTime = cell2mat(rawNumericColumns(:, 108));
MID.TextDisplay1OnsetDelay = cell2mat(rawNumericColumns(:, 109));
MID.TextDisplay1OnsetTime = cell2mat(rawNumericColumns(:, 110));
MID.TextDisplay1OnsetToOnsetTime = cell2mat(rawNumericColumns(:, 111));
MID.TextDisplay1StartTime = cell2mat(rawNumericColumns(:, 112));
MID.TimeVersion16 = cell2mat(rawNumericColumns(:, 113));
MID.TimeVersion5 = cell2mat(rawNumericColumns(:, 114));

% For code requiring serial dates (datenum) instead of datetime, uncomment
% the following line(s) below to return the imported dates as datenum(s).

% NDARINVHMNN9G5JMID.SessionDate=datenum(NDARINVHMNN9G5JMID.SessionDate);
% NDARINVHMNN9G5JMID.SessionStartDateTimeUtc=datenum(NDARINVHMNN9G5JMID.SessionStartDateTimeUtc);NDARINVHMNN9G5JMID.SessionTime=datenum(NDARINVHMNN9G5JMID.SessionTime);

